@page "/"
@inject IJSRuntime JSRuntime

<PageTitle>Password Generator</PageTitle>

<div class="container">
    <svg class="logo-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 290.626 290.626" xml:space="preserve" width="100" height="100">
        <path style="fill:#fc6d43" d="M234.375 150h-15l-3.75 9.375h-4.688l-3.75-9.375H191.25l-3.75 9.375h-4.688l-3.75-9.375h-15.938l-3.75 9.375h-4.687l-3.75-9.375H126.81c-6.909-13.88-21.197-23.438-37.748-23.438-23.302 0-42.187 18.886-42.187 42.188s18.886 42.188 42.187 42.188c16.556 0 30.844-9.558 37.748-23.438h107.564l14.063-18.75z"/>
        <path style="fill:#c2d6f1" d="M290.625 56.25c0-31.017-25.233-56.25-56.25-56.25H56.25C25.233 0 0 25.233 0 56.25c0 18.816 9.319 35.461 23.55 45.68-.038.398-.112.797-.112 1.195V243.75c0 7.753 6.309 14.063 14.062 14.063h46.875v23.438H60.938v9.375h168.749v-9.375H206.25v-23.438h46.875c7.753 0 14.063-6.309 14.063-14.063V103.125c0-.398-.075-.797-.113-1.195 14.231-10.219 23.55-26.864 23.55-45.68m-93.75 225H93.75v-23.438h103.125zm56.25-32.812H37.5a4.693 4.693 0 0 1-4.688-4.688v-9.375h225v9.375a4.69 4.69 0 0 1-4.687 4.688M257.813 225h-225V107.32c7.144 3.291 15.066 5.18 23.437 5.18h178.125c8.372 0 16.294-1.889 23.438-5.18zm-23.438-121.875H56.25c-25.847 0-46.875-21.028-46.875-46.875S30.403 9.375 56.25 9.375h178.125c25.847 0 46.875 21.028 46.875 46.875s-21.028 46.875-46.875 46.875"/>
        <path style="fill:#2e2f2b" d="M103.125 42.188c0-15.511-12.614-28.125-28.125-28.125S46.875 26.677 46.875 42.188v4.688h-4.687v51.563h65.625V46.875h-4.688zm-46.875 0c0-10.341 8.409-18.75 18.75-18.75s18.75 8.409 18.75 18.75v4.688h-37.5zm42.188 46.875H51.563V56.25h46.875z"/>
        <path style="fill:#2e2f2b" d="M70.313 78.384v5.991h9.375v-5.991c2.789-1.627 4.688-4.617 4.688-8.072 0-5.17-4.205-9.375-9.375-9.375s-9.375 4.205-9.375 9.375c-.001 3.455 1.897 6.446 4.687 8.072"/>
        <path style="fill:#fc6d43" d="m157.012 44.892-11.699 3.802V37.5h-9.375v11.194l-11.7-3.802-2.893 8.916 11.696 3.801-7.228 9.947 7.579 5.513 7.233-9.952 7.233 9.952 7.58-5.513-7.229-9.947 11.696-3.801zm46.875 0-11.7 3.802V37.5h-9.375v11.194l-11.7-3.802-2.892 8.916 11.696 3.801-7.229 9.947 7.58 5.513 7.233-9.952 7.233 9.952 7.579-5.513-7.228-9.947 11.696-3.801zm46.875 0-11.7 3.802V37.5h-9.375v11.194l-11.7-3.802-2.892 8.916 11.696 3.801-7.229 9.947 7.58 5.513 7.233-9.952 7.233 9.952 7.579-5.513-7.228-9.947 11.696-3.801z"/>
        <path style="fill:#2e2f2b" d="M70.313 154.688c-7.753 0-14.062 6.309-14.062 14.063s6.309 14.063 14.062 14.063 14.062-6.309 14.062-14.063-6.309-14.063-14.062-14.063m0 18.75c-2.588 0-4.688-2.105-4.688-4.688s2.1-4.688 4.688-4.688S75 166.167 75 168.75s-2.1 4.688-4.687 4.688"/>
    </svg>

    <div class="password-generator-box">
        <div class="form-group">
            <b>
                <label for="headline">Customize your new password</label>
            </b>
        </div>

        <!-- Slider and input for password length -->
        <hr class="hr-divider">
        <div class="form-group slider-group">
            <label for="passwordLengthSlider">Characters</label>
            <div class="slider-and-input">
                <input type="range" id="slider" min="8" max="100" @bind="passwordLength" class="slider"/>
                <input type="number" min="8" max="100" @bind="passwordLength" class="input-number"/>
            </div>
        </div>

        <!-- Checkboxes for password options -->
        <hr class="hr-divider">
        <div class="form-group horizontal-switches">
            <div class="switch-container">
                <label>Uppercase</label>
                <input type="checkbox" @bind="useUppercase" class="form-control-switch"/>
            </div>

            <div class="switch-container">
                <label>Lowercase</label>
                <input type="checkbox" @bind="useLowercase" class="form-control-switch"/>
            </div>

            <div class="switch-container">
                <label>Numbers</label>
                <input type="checkbox" @bind="useNumbers" class="form-control-switch"/>
            </div>

            <div class="switch-container">
                <label>Symbols</label>
                <input type="checkbox" @bind="useSymbols" class="form-control-switch"/>
            </div>
        </div>

        <!-- Generated password -->
        <hr class="hr-divider">
        <div class="form-group">
            <b>
                <label for="generatedPassword">Generated password</label>
            </b>
        </div>
        <div class="form-group generated-password-box">
            <input type="text" id="generatedPassword" value="@generatedPassword" readonly class="generated-password"/>
        </div>

        <div class="form-group button-group">
            <button class="btn btn-primary" @onclick="CopyToClipboard">Copy password</button>
            <button class="btn btn-secondary" @onclick="CreatePassword">Refresh password</button>
        </div>
    </div>

</div>

<div class="footer">
    <p>Created by Nicklas Friis Andersen</p>
    <div class="social-links">
        <a href="https://www.linkedin.com/in/nicklas-friis-andersen-bab1a0252/" target="_blank" rel="noopener noreferrer">
            <svg width="30" height="30" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.761 0 5-2.239 5-5v-14c0-2.761-2.239-5-5-5zm-11 19h-3v-10h3v10zm-1.5-11.268c-.966 0-1.75-.784-1.75-1.75s.784-1.75 1.75-1.75 1.75.784 1.75 1.75-.784 1.75-1.75 1.75zm13.5 11.268h-3v-5.5c0-1.381-1.119-2.5-2.5-2.5s-2.5 1.119-2.5 2.5v5.5h-3v-10h3v1.5c.878-1.314 2.337-2.5 4-2.5 2.481 0 4.5 2.019 4.5 4.5v6.5z"/>
            </svg>
        </a>
        <a href="https://github.com/NicklasFriisAndersen" target="_blank" rel="noopener noreferrer">
            <svg width="30" height="30" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 0c-6.627 0-12 5.373-12 12 0 5.302 3.438 9.8 8.205 11.387.6.111.82-.261.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61-.546-1.387-1.333-1.757-1.333-1.757-1.089-.744.083-.729.083-.729 1.205.084 1.838 1.237 1.838 1.237 1.07 1.834 2.809 1.304 3.495.997.108-.775.418-1.304.76-1.604-2.665-.305-5.466-1.332-5.466-5.931 0-1.31.469-2.381 1.236-3.221-.124-.303-.535-1.523.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.873.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.61-2.803 5.624-5.475 5.921.43.371.814 1.102.814 2.222 0 1.606-.014 2.898-.014 3.293 0 .319.218.694.825.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
            </svg>
        </a>

    </div>
</div>

@code {
    // Character sets for password generation
    private readonly List<char> numbers = Enumerable.Range('0', 10).Select(x => (char)x).ToList();
    private readonly List<char> uppercaseAlphabet = Enumerable.Range('A', 26).Select(x => (char)x).ToList();
    private readonly List<char> lowercaseAlphabet = Enumerable.Range('a', 26).Select(x => (char)x).ToList();
    private readonly List<char> symbols = new() { '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '=', '+', '[', ']', '{', '}', ';', ':', '\"', ',', '.', '<', '>', '/', '?' };

    // Password options
    private int passwordLength = 10;
    private bool useUppercase = true;
    private bool useLowercase = true;
    private bool useSymbols = true;
    private bool useNumbers = true;

    // Generated password
    private string generatedPassword = string.Empty;
    
    // Generate password on startup
    protected override void OnInitialized()
    {
        CreatePassword();
    }

    // Method to create a new password based on selected options
    private void CreatePassword()
    {
        var random = new Random();
        var passwordChars = new List<char>();

        // Add selected character sets to the pool
        if (useUppercase) passwordChars.AddRange(uppercaseAlphabet);
        if (useLowercase) passwordChars.AddRange(lowercaseAlphabet);
        if (useSymbols) passwordChars.AddRange(symbols);
        if (useNumbers) passwordChars.AddRange(numbers);

        //Restrictions
        if (passwordChars.Count == 0) return;
        if(passwordLength < 0) passwordLength = 10;
        if(passwordLength > 100) passwordLength = 100;

        // Generate the password
        var password = new char[passwordLength];
        for (var i = 0; i < passwordLength; i++)
        {
            password[i] = passwordChars[random.Next(passwordChars.Count)];
        }

        generatedPassword = new string(password);
    }

    // Method to copy the generated password to the clipboard
    private async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", generatedPassword);
    }

}