@page "/"

@inject IJSRuntime JSRuntime

<PageTitle>Password Generator</PageTitle>

<div class="password-generator-box">
    <h2>Password Generator</h2>

    <!-- Slider and input for password length -->
    <div class="form-group">
        <label for="passwordLengthSlider">Characters: </label>
        <input type="number" min="4" max="100" @bind="passwordLength" class="input-number" />
        <input type="range" id="passwordLengthSlider" min="4" max="100" @bind="passwordLength" class="slider" />
    </div>

    <div class="switch-wrapper">
        <input type="checkbox" @bind="useUppercase" class="form-control-switch" />
        <label>Uppercase Letters</label>
    </div>

    <div class="switch-wrapper">
        <input type="checkbox" @bind="useLowercase" class="form-control-switch" />
        <label>Lowercase Letters</label>
    </div>

    <div class="switch-wrapper">
        <input type="checkbox" @bind="useNumbers" class="form-control-switch" />
        <label>Numbers</label>
    </div>

    <div class="switch-wrapper">
        <input type="checkbox" @bind="useSymbols" class="form-control-switch" />
        <label>Symbols</label>
    </div>



    <div class="form-group">
        <button class="btn btn-primary" @onclick="CreatePassword">Refresh password</button>
    </div>

    <div class="form-group generated-password-box">
        <label for="generatedPassword">Generated password</label>
        <input type="text" id="generatedPassword" value="@generatedPassword" readonly class="generated-password" />
    </div>

    <div class="form-group">
        <button class="btn btn-secondary" @onclick="CopyToClipboard">Copy password</button>
    </div>
</div>

@code {
private List<char> numbers = Enumerable.Range('0', 10).Select(x => (char)x).ToList();
private List<char> uppercaseAlphabet = Enumerable.Range('A', 26).Select(x => (char)x).ToList();
private List<char> lowercaseAlphabet = Enumerable.Range('a', 26).Select(x => (char)x).ToList();
private List<char> symbols = new List<char> { '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '=', '+', '[', ']', '{', '}', ';', ':', '\"', ',', '.', '<', '>', '/', '?' };

private int passwordLength = 10;
private bool useUppercase = true;
private bool useLowercase = true;
private bool useSymbols = true;
private bool useNumbers = true;

private string generatedPassword = string.Empty;

private void CreatePassword()
{
var random = new Random();
var passwordChars = new List<char>();

if (useUppercase) passwordChars.AddRange(uppercaseAlphabet);
if (useLowercase) passwordChars.AddRange(lowercaseAlphabet);
if (useSymbols) passwordChars.AddRange(symbols);
if (useNumbers) passwordChars.AddRange(numbers);

if (passwordChars.Count == 0) return;

var password = new char[passwordLength];
for (int i = 0; i < passwordLength; i++)
{
password[i] = passwordChars[random.Next(passwordChars.Count)];
}

generatedPassword = new string(password);
}

private async Task CopyToClipboard()
{
await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", generatedPassword);
}
}
